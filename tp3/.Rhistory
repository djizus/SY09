minclasses
minclasses <- NULL
minclasses[[1]] <- min(classe2)
minclasses[[2]] <- min(classe3)
minclasses[[3]] <- min(classe4)
minclasses[[4]] <- min(classe5)
minclasses[[5]] <- min(classe6)
minclasses[[6]] <- min(classe7)
minclasses[[7]] <- min(classe8)
minclasses[[8]] <- min(classe9)
minclasses[[9]] <- min(classe10)
minclasses
for (i in 2:10)
{
resultats[i] <- sum(kmeans(iris[,1:4],4)$withinss)
}
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
resultats <- NULL
for (i in 2:10)
{
resultats[i] <- sum(kmeans(iris[,1:4],4)$withinss)
}
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
for (i in 2:10)
{
resultats[i] <- sum(kmeans(iris[,1:4],i)$withinss)
}
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
resultats <- NULL
for (i in 2:10)
{
resultats[i] <- sum(kmeans(iris[,1:4],i)$withinss)
}
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
plot(minclasses, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
InertieTot <- Mds * 149
InertieTot
resultats <- NULL
classe2<- NULL
classe3<- NULL
classe4<- NULL
classe5<- NULL
classe6<- NULL
classe7<- NULL
classe8<- NULL
classe9<- NULL
classe10<- NULL
#kmeans(iris[,1:4],4)$withinss
for (i in 2:10)
{
resultats[i] <- sum(kmeans(iris[,1:4],i)$withinss)
}
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
#calcul de l'inertie via k-means
for (j in 1:100)
{
#resultats[[1]]<-sum(kmeans(iris[,1:4],1)$withinss)
#classe1[[j]] <- resultats[[1]]
resultats[[2]]<-sum(kmeans(iris[,1:4],2)$withinss)
classe2[[j]] <- resultats[[2]]
resultats[[3]]<-sum(kmeans(iris[,1:4],3)$withinss)
classe3[[j]] <- resultats[[3]]
resultats[[4]]<-sum(kmeans(iris[,1:4],4)$withinss)
classe4[[j]] <- resultats[[4]]
resultats[[5]]<-sum(kmeans(iris[,1:4],5)$withinss)
classe5[[j]] <- resultats[[5]]
resultats[[6]]<-sum(kmeans(iris[,1:4],6)$withinss)
classe6[[j]] <- resultats[[6]]
resultats[[7]]<-sum(kmeans(iris[,1:4],7)$withinss)
classe7[[j]] <- resultats[[7]]
resultats[[8]]<-sum(kmeans(iris[,1:4],8)$withinss)
classe8[[j]] <- resultats[[8]]
resultats[[9]]<-sum(kmeans(iris[,1:4],9)$withinss)
classe9[[j]] <- resultats[[9]]
resultats[[10]]<-sum(kmeans(iris[,1:4],10)$withinss)
classe10[[j]] <- resultats[[10]]
}
minclasses <- NULL
minclasses[[1]] <- InertieTot 
minclasses[[2]] <- min(classe2)
minclasses[[3]] <- min(classe3)
minclasses[[4]] <- min(classe4)
minclasses[[5]] <- min(classe5)
minclasses[[6]] <- min(classe6)
minclasses[[7]] <- min(classe7)
minclasses[[8]] <- min(classe8)
minclasses[[9]] <- min(classe9)
minclasses[[10]] <- min(classe10)
minclasses
plot(minclasses, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
resultats
for (i in 1:10)
{
resultats[i] <- sum(kmeans(iris[,1:4],i)$withinss)
}
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
#calcul de l'inertie via k-means
for (j in 1:100)
{
#resultats[[1]]<-sum(kmeans(iris[,1:4],1)$withinss)
#classe1[[j]] <- resultats[[1]]
resultats[[2]]<-sum(kmeans(iris[,1:4],2)$withinss)
classe2[[j]] <- resultats[[2]]
resultats[[3]]<-sum(kmeans(iris[,1:4],3)$withinss)
classe3[[j]] <- resultats[[3]]
resultats[[4]]<-sum(kmeans(iris[,1:4],4)$withinss)
classe4[[j]] <- resultats[[4]]
resultats[[5]]<-sum(kmeans(iris[,1:4],5)$withinss)
classe5[[j]] <- resultats[[5]]
resultats[[6]]<-sum(kmeans(iris[,1:4],6)$withinss)
classe6[[j]] <- resultats[[6]]
resultats[[7]]<-sum(kmeans(iris[,1:4],7)$withinss)
classe7[[j]] <- resultats[[7]]
resultats[[8]]<-sum(kmeans(iris[,1:4],8)$withinss)
classe8[[j]] <- resultats[[8]]
resultats[[9]]<-sum(kmeans(iris[,1:4],9)$withinss)
classe9[[j]] <- resultats[[9]]
resultats[[10]]<-sum(kmeans(iris[,1:4],10)$withinss)
classe10[[j]] <- resultats[[10]]
}
minclasses <- NULL
minclasses[[1]] <- InertieTot 
minclasses[[2]] <- min(classe2)
minclasses[[3]] <- min(classe3)
minclasses[[4]] <- min(classe4)
minclasses[[5]] <- min(classe5)
minclasses[[6]] <- min(classe6)
minclasses[[7]] <- min(classe7)
minclasses[[8]] <- min(classe8)
minclasses[[9]] <- min(classe9)
minclasses[[10]] <- min(classe10)
minclasses
#Affichage en coude
plot(minclasses, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
resultats[5]
classe5
km = kmeans(iris[,1:4], 4, nstart=20)
table(km$cluster,iris$type)
table(km$cluster)
table(iris$type)
km = kmeans(iris[,1:4], 3, nstart=20)
table(km$cluster,iris$type)
iris
iris$type
table(km$cluster,iris$Species)
km = kmeans(iris[,1:4], 4, nstart=20)
table(km$cluster,iris$Species)
table(iris$Species, km$cluster)
iris[,1:4]
table(km$cluster,iris$Species)
km = kmeans(iris[,1:4], 3, nstart=20)
table(km$cluster,iris$Species)
km = kmeans(iris[,1:4], 5, nstart=20)
table(km$cluster,iris$Species)
plot(km$cluster, col=c("red","blue","green")[iris$Species])
km = kmeans(iris[,1:4], 4, nstart=20)
plot(km$cluster, col=c("red","blue","green")[iris$Species])
pair(km$cluster, col=c("red","blue","green")[iris$Species])
pair(iris[1,4], col=c("red","blue","green")[km$cluster])
plot(iris[1,4], col=c("red","blue","green")[km$cluster])
plot(iris[1,4], col=c("red","blue","green")[iris$Species])
plot(iris, col=c("red","blue","green")[iris$Species])
plot(iris, col=c("red","blue","green")[km$cluster])
km = kmeans(iris[,1:4], 4, nstart=20)
table(km$cluster,iris$Species)
plot(km$cluster, col=c("red","blue","green")[iris$Species])
plot(iris, col=c("red","blue","green","black")[km$cluster])
plot(iris[1,4], col=c("red","blue","green","black")[km$cluster])
plot(minclasses, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
plot(iris[1,4], col=c("red","blue","green","black")[km$cluster])
library(MASS)
data(crabs)
crabsquant <- crabs[,4:8]
crabsquant
#matrice de variance
M <- var(crabsquant)
#diag de cette matrice
Md <- diag(M)
#faire la somme : trace de la variance
Mds <- sum(Md)
#on multiplie par Nk-1 pour trouver l'inertie intra classe
InertieTot <- Mds * 199
InertieTot
crabsquant <- crabsquant/crabsquant[4]
crabsquant <- crabs[,4:8]
crabsquant1 <- crabsquant[,2:5]
crabsquant1 <- crabsquant1/crabsquant[,1]
crabsquant1
crabsquant <- crabs[,4:8]
crabsquant1 <- crabsquant[,2:5]
crabsquant1 <- crabsquant1/crabsquant[,4]
crabsquant <- crabsquant1
crabsquant
crabsquant <- crabs[,4:8]
crabsquant1 <- crabsquant[,2:5]
crabsquant1 <- crabsquant1/crabsquant[,3]
crabsquant <- crabsquant1
crabsquant
crabsquant <- crabs[,4:8]
crabsquant1 <- crabsquant[,2:5]
crabsquant1 <- crabsquant1/crabsquant[,5]
crabsquant <- crabsquant1
crabsquant
crabsquant <- crabs[,4:8]
crabsquant1 <- crabsquant[,2:5]
crabsquant1 <- crabsquant1/crabsquant[,1]
crabsquant <- crabsquant1
crabsquant
#matrice de variance
M <- var(crabsquant)
#diag de cette matrice
Md <- diag(M)
#faire la somme : trace de la variance
Mds <- sum(Md)
#on multiplie par Nk-1 pour trouver l'inertie intra classe
InertieTot <- Mds * 199
InertieTot
plot(crabsquant, col=crabs$sp)
resultats <- NULL
classe2<- NULL
classe3<- NULL
classe4<- NULL
classe5<- NULL
classe6<- NULL
classe7<- NULL
classe8<- NULL
classe9<- NULL
classe10<- NULL
#kmeans(crabsquant,4)$withinss
for (i in 1:10)
{
resultats[i] <- sum(kmeans(crabsquant,i)$withinss)
}
plot(resultats, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
#inertie intra-classe = somme des inerties intra-clusters au sein de la 
#même classe
#calcul de l'inertie via k-means
for (j in 1:100)
{
#resultats[[1]]<-sum(kmeans(crabsquant,1)$withinss)
#classe1[[j]] <- resultats[[1]]
resultats[[2]]<-sum(kmeans(crabsquant,2)$withinss)
classe2[[j]] <- resultats[[2]]
resultats[[3]]<-sum(kmeans(crabsquant,3)$withinss)
classe3[[j]] <- resultats[[3]]
resultats[[4]]<-sum(kmeans(crabsquant,4)$withinss)
classe4[[j]] <- resultats[[4]]
resultats[[5]]<-sum(kmeans(crabsquant,5)$withinss)
classe5[[j]] <- resultats[[5]]
resultats[[6]]<-sum(kmeans(crabsquant,6)$withinss)
classe6[[j]] <- resultats[[6]]
resultats[[7]]<-sum(kmeans(crabsquant,7)$withinss)
classe7[[j]] <- resultats[[7]]
resultats[[8]]<-sum(kmeans(crabsquant,8)$withinss)
classe8[[j]] <- resultats[[8]]
resultats[[9]]<-sum(kmeans(crabsquant,9)$withinss)
classe9[[j]] <- resultats[[9]]
resultats[[10]]<-sum(kmeans(crabsquant,10)$withinss)
classe10[[j]] <- resultats[[10]]
}
minclasses <- NULL
minclasses[[1]] <- InertieTot 
minclasses[[2]] <- min(classe2)
minclasses[[3]] <- min(classe3)
minclasses[[4]] <- min(classe4)
minclasses[[5]] <- min(classe5)
minclasses[[6]] <- min(classe6)
minclasses[[7]] <- min(classe7)
minclasses[[8]] <- min(classe8)
minclasses[[9]] <- min(classe9)
minclasses[[10]] <- min(classe10)
minclasses
#Affichage en coude
plot(minclasses, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
plot(minclasses, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
km = kmeans(crabsquant, 6, nstart=20)
table(km$cluster,crabs$sp)
km = kmeans(crabsquant, 5, nstart=20)
table(km$cluster,crabs$sp)
km = kmeans(crabsquant, 4, nstart=20)
table(km$cluster,crabs$sp)
km = kmeans(crabsquant, 3, nstart=20)
table(km$cluster,crabs$sp)
plot(crabs, col=c("red","blue","green","black")[km$cluster])
plot(crabsquant, col=c("red","blue","green","black")[km$cluster])
km = kmeans(crabsquant, 4, nstart=20)
table(km$cluster,crabs$sp)
plot(km$cluster, col=c("red","blue","green")[crabs$sp])
plot(crabsquant, col=c("red","blue","green","black")[km$cluster])
plot(km$cluster, col=c("red","blue","green")[crabs$sp])
km = kmeans(crabsquant, 4, nstart=20)
table(km$cluster,crabs$sex)
plot(km$cluster, col=c("red","blue","green")[crabs$sex])
plot(crabsquant, col=c("red","blue","green","black")[km$cluster])
km = kmeans(crabsquant, 2, nstart=20)
table(km$cluster,crabs$sex)
plot(crabsquant, col=c("red","blue","green","black")[km$cluster])
plot(km$cluster, col=c("red","blue","green")[crabs$sex])
plot(minclasses, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
km = kmeans(crabsquant, 4, nstart=20)
table(km$cluster,crabs$sp)
plot(km$cluster, col=c("red","blue","green")[crabs$sp])
plot(crabsquant, col=c("red","blue","green","black")[km$cluster])
plot(km$cluster, col=c("red","blue")[crabs$sp])
plot(km$cluster, col=c("red","blue")[crabs$sex])
plot(crabsquant, col=c("red","blue","green","black")[km$cluster])
setwd("Z:/R/tp3")
getwd()
library(MASS)
n <- 600
pi <- 1/2
mu1 <- matrix(c(0,0))
mu2 <- matrix(c(10,0))
Id <- matrix(c(1,0,0,1),2,2)
Sigma1 <- 1 * Id 
Sigma2 <- 1 * Id 
Sigma3 <- 1 * Id 
Sigma4 <- 5 * Id
Sigma5 <- 1 * Id 
Sigma6 <- 9 * Id
Sigma7 <- 5 * Id 
Sigma8 <- 5 * Id
Sigma9 <- 9 * Id 
Sigma10 <- 9 * Id
#mvrnorm nous renvoie un sample qui est un vecteur composé de 2 valeurs
#il faut donc qu'on enregistre les 2, donc on fait une matrice avec 
#ce vecteur + une colonne pour dire sur quelle loi on est
simul <- function (n,pi,mu1,mu2,Sigma1,Sigma2)
{
#on tire 600 nombres entre 0 et 1
samples <- sample(0:1, n, replace=TRUE)
resultat <- matrix(nrow=n, ncol=3)
for(k in 1:n)
{
if(samples[k] <= pi)
{
resultat[k,c(1)] <- 1
resultat[k, c(2,3)] <- mvrnorm(1, mu1, Sigma1)
}
else
{
resultat[k,c(1)] <- 2
resultat[k, c(2,3)] <- mvrnorm(1, mu2, Sigma2)
}
}
resultat
}
resultat1 <- simul(n,pi,mu1,mu2,Sigma1,Sigma2)
resultat2 <- simul(n,pi,mu1,mu2,Sigma3,Sigma4)
resultat3 <- simul(n,pi,mu1,mu2,Sigma5,Sigma6)
resultat4 <- simul(n,pi,mu1,mu2,Sigma7,Sigma8)
resultat5 <- simul(n,pi,mu1,mu2,Sigma9,Sigma10)
library(MASS)
n <- 600
pi <- 1/2
mu1 <- matrix(c(0,0))
mu2 <- matrix(c(10,0))
Id <- matrix(c(1,0,0,1),2,2)
Sigma1 <- 1 * Id 
Sigma2 <- 1 * Id 
Sigma3 <- 1 * Id 
Sigma4 <- 5 * Id
Sigma5 <- 1 * Id 
Sigma6 <- 9 * Id
Sigma7 <- 5 * Id 
Sigma8 <- 5 * Id
Sigma9 <- 9 * Id 
Sigma10 <- 9 * Id
#mvrnorm nous renvoie un sample qui est un vecteur composé de 2 valeurs
#il faut donc qu'on enregistre les 2, donc on fait une matrice avec 
#ce vecteur + une colonne pour dire sur quelle loi on est
simul <- function (n,pi,mu1,mu2,Sigma1,Sigma2)
{
#on tire 600 nombres entre 0 et 1
samples <- sample(0:1, n, replace=TRUE)
resultat <- matrix(nrow=n, ncol=3)
for(k in 1:n)
{
if(samples[k] <= pi)
{
resultat[k,c(1)] <- 1
resultat[k, c(2,3)] <- mvrnorm(1, mu1, Sigma1)
}
else
{
resultat[k,c(1)] <- 2
resultat[k, c(2,3)] <- mvrnorm(1, mu2, Sigma2)
}
}
resultat
}
resultat1 <- simul(n,pi,mu1,mu2,Sigma1,Sigma2)
resultat2 <- simul(n,pi,mu1,mu2,Sigma3,Sigma4)
resultat3 <- simul(n,pi,mu1,mu2,Sigma5,Sigma6)
resultat4 <- simul(n,pi,mu1,mu2,Sigma7,Sigma8)
resultat5 <- simul(n,pi,mu1,mu2,Sigma9,Sigma10)
plot(resultat1[resultat1[c(1)]==0, c(2,3)])
plot(resultat1[resultat1[,c(1)]==0, c(2,3)])
plot(resultat1[resultat1[,1]==0], c(2,3))
plot(resultat1[resultat1[,1]==0, c(2,3)])
plot(resultat1[c(2,3)])
resultat1[c(2,3)]
resultat1[2,3]
resultat1
resultat1[c(1,3)]
resultat1[c(2,3)]
resultat1[,c(2,3)]
plot(resultat1[,c(2,3)])
plot(resultat1[,c(2,3)], col=(blue,red))
plot(resultat1[,c(2,3)], col=("blue","red"))
plot(resultat1[,c(2,3)], col=c("blue","red"))
plot(resultat1[,c(2,3)], col=c("blue"))
plot(resultat1[,c(2,3)], col=c("blue","red"))
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
boxplot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
pair(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
par(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
par(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat2[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat3[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat4[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat5[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat4[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat3[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat2[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
par(new=TRUE)
resultat1[2,3]
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat2[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
sigma9
Sigma9
Sigma8
Sigma7
Sigma6
Sigma5
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat2[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat2[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
library(MASS)
n <- 600
pi <- 1/2
mu1 <- matrix(c(0,0))
mu2 <- matrix(c(10,0))
Id <- matrix(c(1,0,0,1),2,2)
Sigma1 <- 1 * Id 
Sigma2 <- 1 * Id 
Sigma3 <- 1 * Id 
Sigma4 <- 5 * Id
Sigma5 <- 1 * Id 
Sigma6 <- 9 * Id
Sigma7 <- 5 * Id 
Sigma8 <- 5 * Id
Sigma9 <- 9 * Id 
Sigma10 <- 9 * Id
#mvrnorm nous renvoie un sample qui est un vecteur composé de 2 valeurs
#il faut donc qu'on enregistre les 2, donc on fait une matrice avec 
#ce vecteur + une colonne pour dire sur quelle loi on est
simul <- function (n,pi,mu1,mu2,Sigma_1,Sigma_2)
{
#on tire 600 nombres entre 0 et 1
samples <- sample(0:1, n, replace=TRUE)
resultat <- matrix(nrow=n, ncol=3)
for(k in 1:n)
{
if(samples[k] <= pi)
{
resultat[k,c(1)] <- 1
resultat[k, c(2,3)] <- mvrnorm(1, mu1, Sigma_1)
}
else
{
resultat[k,c(1)] <- 2
resultat[k, c(2,3)] <- mvrnorm(1, mu2, Sigma_2)
}
}
resultat
}
resultat1 <- simul(n,pi,mu1,mu2,Sigma1,Sigma2)
resultat2 <- simul(n,pi,mu1,mu2,Sigma3,Sigma4)
resultat3 <- simul(n,pi,mu1,mu2,Sigma5,Sigma6)
resultat4 <- simul(n,pi,mu1,mu2,Sigma7,Sigma8)
resultat5 <- simul(n,pi,mu1,mu2,Sigma9,Sigma10))
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat2[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat3[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat4[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat5[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
#boxplot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
plot(resultat1[,c(2,3)], col=c("blue","red")[resultat1[,c(1)]])
